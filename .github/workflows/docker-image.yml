name: Build Container for building EddictwareELEC images

on:
  workflow_dispatch:
  push:
    branches: [ "master-entw" ]
  pull_request:
    branches: [ "master-entw" ]

env:
  DistroCodeName: noble
  EE_Distro: EddictwareELEC
  EE_Project: RPi
  EE_Device: RPi4
  EE_Arch: aarch64

jobs:
  build:
#    runs-on: github
    runs-on: self-hosted
    env:
      BUILDKIT_PROGRESS: 'auto' #'plain' 'quiet'
    steps:
    - 
      name: Get Date
      id: get-date
      run: |
        echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
      shell: bash

    - 
      name: Get docker guid
      id: get-docker-guid
      run: |
        echo "docker-guid=$(id -u docker)" >> $GITHUB_OUTPUT
      shell: bash

    - 
      name: Compose image tag
      id: compose-image-tag
      run: |
        echo "EE_Distro_tag=eddict/${EE_Distro@L}.${DistroCodeName}" >> $GITHUB_OUTPUT
      shell: bash

    -
      name: Build Docker image
      uses: actions/checkout@v4
      with:
        ref: 'master-entw'

    # In this step, this action saves a list of existing images,
    # the cache is created without them in the post run.
    # It also restores the cache if it exists.
    - 
      name: Cache Docker layers
#      uses: satackey/action-docker-layer-caching@v0.0.12
      uses: jpribyl/action-docker-layer-caching@v0.1.1
      # Ignore the failure of a step and avoid terminating the job.
      continue-on-error: true

    # - 
    #   name: Cache dependencies
    #   uses: actions/cache@v3
    #   with:
    #     path: /tmp/.buildx-cache
    #     key: ${{ runner.os }}-multi-buildx-${{ github.ref_name }}-${{ steps.get-date.outputs.date }} #${{ github.sha }} ${{ github.ref_name }}
    #     restore-keys: |
    #       ${{ runner.os }}-multi-buildx-${{ github.ref_name }}-

    - name: Log in to (local/private) registry
      uses: docker/login-action@v3
      with:
        registry: "${{ secrets.REGISTRY_FQDN }}"
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PWD }}

    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        # https://github.com/moby/buildkit/blob/master/docs/buildkitd.toml.md
        buildkitd-config-inline: |
          debug = false
          [registry."${{ secrets.REGISTRY_FQDN }}"]
            http = false
        version: latest
        cleanup: true
#        buildkitd-flags: '"--progress ''plain''"'

    -
      name: Build and export to (local/private) registry
      uses: docker/build-push-action@v6
      with:
        file: tools/docker/${{ env.DistroCodeName }}/Dockerfile
        load: true
        tags: ${{ steps.compose-image-tag.outputs.EE_Distro_tag }}
        build-args: |
          USER_UID=${{ steps.get-docker-guid.outputs.docker-guid }}
#          --progress=plain
#          DOCKER_BUILDKIT=0
        no-cache: false
        # cache-from: type=registry,ref=${{ vars.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_HUB_IMAGE_NAME }}.1:buildcache
        # cache-to: type=registry,ref=${{ vars.DOCKER_HUB_USERNAME }}/${{ vars.DOCKER_HUB_IMAGE_NAME }}.1:buildcache,mode=max
        # cache-from: type=local,src=/tmp/.buildx-cache
        # cache-to: type=local,mode=max,dest=/tmp/.buildx-cache

    # - name: Ccache for gh actions
    #   uses: hendrikmuhs/ccache-action@v1.2
    #   with:
    #     max-size: 10G

    - 
      name: Build ${{ env.EE_Distro }} image
      env: 
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ ! "$(docker ps -a -q -f name=build${{ env.EE_Distro }}.${{ env.DistroCodeName }})" ]; then
          chown -R docker:docker $PWD
          docker login --username ${{ vars.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}
          if [ "$(docker ps -aq -f status=exited -f name=build${{ env.EE_Distro }}.${{ env.DistroCodeName }})" ]; then
              # cleanup
              docker rm "build$${{ env.EE_Distro }}.${{ env.DistroCodeName }}"
          fi
          # run the container
          docker run --rm \
            --log-driver none \
            --name "build${{ env.EE_Distro }}.${{ env.DistroCodeName }}" \
            -v $PWD:/build \
            -w /build \
            -e DISABLE_COLORS=yes \
            -e LOGCOMBINE=fail \
            -e MTIMMEDIATE=no \
            -e MTDEBUG=no \
            -e MTVERBOSE=no \
            -e MTPROGRESS=yes \
            -e DISTRO=${{ env.EE_Distro }} \
            -e PROJECT=${{ env.EE_Project }} \
            -e DEVICE=${{ env.EE_Device }} \
            -e ARCH=$Arch \
            -e BUILDER_NAME=Eddict \
            -e BUILDER_VERSION="13.0-$(date +%Y%m%d)" \
            "${{ secrets.REGISTRY_FQDN }}/${{ steps.compose-image-tag.outputs.EE_Distro_tag }}" make image
        fi

    - 
      name: Copy built ${{ env.EE_Distro }} image to artifacts
      run: |
        lines=$(find ./target -maxdepth 1 -type f -iname "${{ env.EE_Distro }}-${{ env.EE_Device }}.${{ env.EE_Arch }}*.img.gz" 2>/dev/null | wc -l)
        if [ $lines -neq 0 ]; then
          filename=$(ls -t "./target/${{ env.EE_Distro }}-${{ env.EE_Device }}.${{ env.EE_Arch }}*.img.gz" | tail --lines=1)
          echo "built_image=$filename" >> $GITHUB_OUTPUT
          mkdir --parents "./target_archive"
          cp --update=none "$filename" "./target_archive"
        fi

    - 
      name: Build and push to (local/private) registry
      uses: docker/build-push-action@v6
      with:
        file: tools/docker/${{ env.DistroCodeName }}/Dockerfile
        push: true
        tags: "${{ secrets.REGISTRY_FQDN }}/${{ steps.compose-image-tag.outputs.EE_Distro_tag }}"
        no-cache: false
        # cache-from: type=local,src=/tmp/.buildx-cache
        # cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
